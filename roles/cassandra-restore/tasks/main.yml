# Create file list from backup
# Take last archive (if diff < 40%?)
# Remove files not in the list
# Take lastest backup
--- 
# Stop Cassandra
- name: stop Cassandra
  include_role: 
    name: cassandra-stop

# Validate you want to delete all data
- name: Validate you want to delete all data in {{ cassandra_home }}/current_cassandra/data and {{ cassandra_data_dir }}
  pause:
    prompt: "All datas in {{ cassandra_home }}/current_cassandra/data and {{ cassandra_data_dir }} will be erased, Press return to validate or ^C to cancel"

# Delete commitlog, hints, saved_caches, data
- name: delete commitlog, hints, saved_caches, data
  shell: rm -rf {{ cassandra_home }}/current_cassandra/data/commitlog/* {{ cassandra_home }}/current_cassandra/data/hints/* {{ cassandra_home }}/current_cassandra/data/saved_caches/* {{ cassandra_data_dir }}/*
  args:
    executable: /bin/bash
    warn: false

# Create file list from backup
- name: Create file list from backup
  shell: timeout {{ timeout }} dsmc q ba {{ cassandra_data_dir }}/ -detail -filesonly | awk 'NR > 13 { print }' > {{ cassandra_data_dir }}/list_files_backup
  args:
    executable: /bin/bash
    warn: false
  when: not archive_only

# Retrieve data from TSM
- name: Retrieve data
  shell:  "timeout {{ timeout }} {{ command_retrieve }} {{ cassandra_data_dir }}/ {{ cassandra_data_dir }}/"
  args: 
    executable: /bin/bash
  register: dsmc_out_rt
  failed_when: dsmc_out_rt.rc > 8

# Show retrieve outs
- name: Show retrieve results
  debug: 
    var: dsmc_out_rt

# Check result retrieve
- name: Check result retrieve
  pause:
    prompt: "Press return when checked result retrieve"

# Remove files not in the initial backup list
- name: Copy file diff cleanup script
  template:
    src: diff_remove.py.j2
    dest: /home/{{ ansible_ssh_user }}/diff_remove.py
    mode: 0755
  when: not archive_only
    
# Run diff_remove script
- name: Run diff_remove script
  shell: python /home/{{ ansible_ssh_user }}/diff_remove.py > /home/{{ansible_ssh_user}}/diff_remove_out
  args: 
    executable: /bin/bash
  when: not archive_only

# Check removed files
- name: Check removed files
  pause:
    prompt: "Press return when checked removed files"
  when: not archive_only

# Take latest backup - restore data from TSM
- name: Restore data - latest backup
  shell:  "timeout {{ timeout }} {{ command_restore }} {{ cassandra_data_dir }}/ {{ cassandra_data_dir }}/"
  args: 
    executable: /bin/bash
  register: dsmc_out_rt
  failed_when: dsmc_out_rt.rc > 8
  when: not archive_only

# Show restore outs
- name: Show restore results
  debug: 
    var: dsmc_out_rt
  when: not archive_only

# Check result restore
- name: Check result restore
  pause:
    prompt: "Press return when checked result restore"
  when: not archive_only

# Copy relocate_snapshot script
- name: Copy relocate_snapshot script
  template:
    src: relocate_snapshot.py.j2
    dest: /home/{{ ansible_ssh_user }}/relocate_snapshot.py
    mode: 0755

# Run relocate_snapshot script
- name: Run relocate_snapshot script
  shell: python /home/{{ ansible_ssh_user }}/relocate_snapshot.py > /home/{{ansible_ssh_user}}/relocate_snapshot_out
  args: 
    executable: /bin/bash
  register: py_out

# Check script errors?
- name: Show py_out
  debug: 
    var: py_out

# Start Cassandra seeds
#- name: start Cassandra seeds
#  include_role: 
#    name: cassandra-start
#  when: multiple_nodes and ("'cassandraseeds' in group_names" or "'elassandraseeds' in group_names")
#  loop_control:
#    pause: 5

# Wait for Cassandra daemon to fully start in seeds
#- name: wait for Cassandra daemon to fully start in seeds
#  pause:
#    prompt: "Press return when Cassandra startup has finished in seeds"

# Start Cassandra non seed
#- name: start Cassandra non seed
#  include_role: 
#    name: cassandra-start
#  when: multiple_nodes and ("'cassandranonseeds' in group_names" or "'elassandranonseeds' in group_names")
#  loop_control:
#    pause: 5

# Wait for Cassandra daemon to fully start non seed
#- name: wait for Cassandra daemon to fully start in non seeds
#  pause:
#    prompt: "Press return when Cassandra startup has finished in non seeds"
#  when: multiple_nodes

# Final steps
- name: final steps
  debug:
    msg: "Start cassandra orderly, run full cluster repair (also post-setup if it hasn't been done after setup)"