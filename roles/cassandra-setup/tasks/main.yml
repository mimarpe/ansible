# Basic setup script to be run after getting root privileges (add_ssh_keys.yml)
# ansible-playbook -i cassandra_hosts -l <newmachine> cassandra-elassandra-setup.yml
--- 
    # Create folder for Cassandra    
    - name: Creates directory for Cassandra
      file: path="{{ cassandra_home }}" state=directory    
      
    - name: Check if cassandra exists already
      stat: path="{{ cassandra_home }}/current_cassandra/conf/cassandra.yaml"
      register: cassandra_conf
        
    # Download Cassandra
    - name: Download tarball and check md5
      get_url:
        url: "{{ cassandra_url_download }}"
        dest: "{{ cassandra_home }}/{{ cassandra_installation_type }}.tar.gz"
    
    # Install Cassandra    
    - unarchive: src="{{cassandra_home}}/{{ cassandra_installation_type }}.tar.gz" dest="{{ cassandra_home }}/" copy=no
      when: cassandra_conf.stat.exists == False
    
    # Create link
    - name: Create symlink to Cassandra
      file:
        src: "{{ cassandra_installation_type }}-{{ cassandra_version }}/"
        dest: "{{ cassandra_home }}/current_cassandra"
        state: link
   
    # Configuration files
    - name: Copy system configuration files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        backup: yes
      with_items:
        #- { src: copy/90-max_map_count.conf , dest: /etc/sysctl.d/90-max_map_count.conf }
        #- { src: copy/99-tcp-buffers.conf   , dest: /etc/sysctl.d/99-tcp-buffers.conf }
        #- { src: copy/cassandra.conf        , dest: /etc/security/limits.d/cassandra.conf }
        #- { src: copy/jvm.options           , dest: "{{ cassandra_home }}/current_cassandra/conf/jvm.options" }
        - { src: files/jmxremote.access      , dest: "{{ cassandra_home }}/current_cassandra/conf/jmxremote.access" }
        #- { src: files/jmxremote.password    , dest: "{{ cassandra_home }}/current_cassandra/conf/jmxremote.password" }
        #- { src: copy/rc.local              , dest: /etc/rc.local }
        
    # Copy templates
    - name: Copy templates
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      with_items:
        - src: jmxremote.password.j2
          dest: "{{ cassandra_home }}/current_cassandra/conf/jmxremote.password"
          mode: "0400"
        - src: jvm.options.j2
          dest: "{{ cassandra_home }}/current_cassandra/conf/jvm.options"
          mode: "0640"
        - src: cassandra_stop.sh.j2
          dest: "/home/{{ansible_ssh_user}}/cassandra_stop.sh"
          mode: "0750"

    #https://tobert.github.io/pages/als-cassandra-21-tuning-guide.html

    # Edit listen_address
    - name: Replace listen_address
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="listen_address:\s[^\n]*\n" 
        replace="listen_address: {{inventory_hostname}}\n" 
        backup=yes'
        
    # Edit rpc_address
    - name: Replace rpc_address
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="rpc_address:\s[^\n]*\n" 
        replace="rpc_address: {{inventory_hostname}}\n" 
        backup=no'
        
    # Edit start_rpc
    - name: Enable rpc
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="start_rpc:\sfalse\n" 
        replace="start_rpc: true\n" 
        backup=no'
    
    # Edit num_tokens
    - name: Replace num_tokens
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="num_tokens:\s\d+" 
        replace="num_tokens: {{ cassandra_numtokens }}\n"
        backup=no'
    
    # Edit cluster_name
    - name: Replace cluster_name
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="cluster_name:\s[^\n]*\n" 
        replace="cluster_name: \"{{ cassandra_cluster_name }}\"\n" 
        backup=no'
    
    # Edit endpoint_snitch
    - name: Edit endpoint_snitch
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="endpoint_snitch:\s[^\n]*\n" 
        replace="endpoint_snitch: GossipingPropertyFileSnitch\n"
        backup=no'
    
    # Edit dynamic_snitch
    #- name: Edit dynamic_snitch
    #  lineinfile:
    #    path: "{{ cassandra_home }}/current_cassandra/conf/cassandra.yaml"
    #    regexp: 'dynamic_snitch:\s[^\n]*\n'
    #    insertafter: 'endpoint_snitch:\s[^\n]*\n'
    #    line: 'dynamic_snitch: false'
    #    backup: no
        
    # Edit enable_materialized_views
    - name: Edit enable_materialized_views
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="enable_materialized_views:\s[^\n]*\n" 
        replace="enable_materialized_views: false\n"
        backup=no'    
        
    # Edit seeds
    - name: Replace seeds
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="seeds:\s[^\n]*\n" 
        replace="seeds: \"{{ cassandra_seeds }}\"\n"
        backup=no'
        
    # Edit authenticator
    - name: Replace authenticator
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="authenticator:\s[^\n]*\n" 
        replace="authenticator: PasswordAuthenticator\n"
        backup=no'
    
    # Edit data_file_directories
    - name: Replace data_file_directories
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\sdata_file_directories:\s[^\n]*\n" 
        replace="data_file_directories:\n  - {{cassandra_data_dir}}\n"
        backup=no'
        
    # Edit concurrent_reads
    - name: Replace concurrent_reads
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="concurrent_reads:\s[^\n]*\n" 
        replace="concurrent_reads: 64\n"
        backup=no'

    # Edit concurrent_writes
    - name: Replace concurrent_writes
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="concurrent_writes:\s[^\n]*\n" 
        replace="concurrent_writes: 64\n"
        backup=no'
        
    # Edit concurrent_counter_writes
    - name: Replace concurrent_counter_writes
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="concurrent_counter_writes:\s[^\n]*\n" 
        replace="concurrent_counter_writes: 64\n"
        backup=no'
        
    # Edit memtable_allocation_type
    - name: Replace memtable_allocation_type
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="memtable_allocation_type:\s[^\n]*\n" 
        replace="memtable_allocation_type: offheap_objects\n"
        backup=no'
        
    # Edit memtable_flush_writers
    - name: Replace memtable_flush_writers
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="#memtable_flush_writers:\s[^\n]*\n" 
        replace="memtable_flush_writers: 2\n"
        backup=no'

    # Edit tombstone_warn_threshold
    - name: Replace tombstone_warn_threshold
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml
        regexp="tombstone_warn_threshold:\s[^\n]*\n"
        replace="tombstone_warn_threshold: 100000\n"
        backup=no'

    # Edit tombstone_failure_threshold
    - name: Replace tombstone_failure_threshold
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml
        regexp="tombstone_failure_threshold:\s[^\n]*\n"
        replace="tombstone_failure_threshold: 1000000\n"
        backup=no'
        
#    # Edit key_cache_size
#    - name: Replace key_cache_size
#      replace: 
#        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
#        regexp="key_cache_size_in_mb:\s*\n" 
#        replace="key_cache_size_in_mb: 1024\n"
#        backup=no'
        
    # Edit compaction_throughput_mb_per_sec
    - name: Replace compaction_throughput_mb_per_sec
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="compaction_throughput_mb_per_sec:\s[^\n]*\n" 
        replace="compaction_throughput_mb_per_sec: 80\n"
        backup=no'
        
    # Edit concurrent_compactors
    - name: Replace concurrent_compactors
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="#concurrent_compactors:\s[^\n]*\n" 
        replace="concurrent_compactors: 2\n"
        backup=no'    

    # Edit max_hint_window_in_ms
    - name: Replace max_hint_window_in_ms
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="max_hint_window_in_ms:\s[^\n]*\n" 
        replace="max_hint_window_in_ms: 18000000\n"
        backup=no'
        
    # Edit hinted_handoff_throttle_in_kb
    - name: Replace hinted_handoff_throttle_in_kb
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="hinted_handoff_throttle_in_kb:\s[^\n]*\n" 
        replace="hinted_handoff_throttle_in_kb: 102400\n"
        backup=no'
        
    # Edit max_hints_delivery_threads
    - name: Replace max_hints_delivery_threads
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="max_hints_delivery_threads:\s[^\n]*\n" 
        replace="max_hints_delivery_threads: 16\n"
        backup=no'
        
    # Edit batch_size_warn_threshold_in_kb
    - name: Edit batch_size_warn_threshold_in_kb
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="batch_size_warn_threshold_in_kb:\s[^\n]*\n" 
        replace="batch_size_warn_threshold_in_kb: {{batch_size_warn}}\n"
        backup=no'
        
    # Edit batch_size_fail_threshold_in_kb
    - name: Edit batch_size_fail_threshold_in_kb
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="batch_size_fail_threshold_in_kb:\s[^\n]*\n" 
        replace="batch_size_fail_threshold_in_kb: {{batch_size_fail}}\n"
        backup=no'
        
    # Edit allocate_tokens_for_keyspace
    - name: Edit allocate_tokens_for_keyspace
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\sallocate_tokens_for_keyspace:\s[^\n]*\n" 
        replace="allocate_tokens_for_keyspace: {{keyspace_allocate}}\n"
        backup=no'
      when: env_domain != 'restore'
        
    # Edit roles_validity_in_ms
    - name: Edit roles_validity_in_ms
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="roles_validity_in_ms:\s[^\n]*\n" 
        replace="roles_validity_in_ms: 30000\n"
        backup=no'
        
    # Add streaming_socket_timeout_in_ms 
    - name: Add streaming_socket_timeout_in_ms
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/cassandra.yaml"
        regexp: 'streaming_socket_timeout_in_ms:\s[^\n]*\n'
        line: "streaming_socket_timeout_in_ms: 86400000\n"
        
    # Edit permissions_validity_in_ms
    - name: Edit permissions_validity_in_ms
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="permissions_validity_in_ms:\s[^\n]*\n" 
        replace="permissions_validity_in_ms: 30000\n"
        backup=no'
        
    # Edit credentials_validity_in_ms
    - name: Edit credentials_validity_in_ms
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="credentials_validity_in_ms:\s[^\n]*\n" 
        replace="credentials_validity_in_ms: 30000\n"
        backup=no'
        
    # Edit server_encryption_options internode_encryption
    - name: Replace server_encryption_options internode_encryption
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="internode_encryption:\snone\n" 
        replace="internode_encryption: all\n"
        backup=no'
        
    # Edit server_encryption_options keystore
    - name: Replace server_encryption_options keystore
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="keystore:\sconf/\.keystore\n" 
        replace="keystore: {{cassandra_home}}/current_cassandra/conf/{{inventory_hostname}}.jks\n"
        backup=no'
   
    # Edit server_encryption_options keystore_password
    - name: Replace server_encryption_options keystore_password
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="keystore_password:\scassandra\n" 
        replace="keystore_password: {{cassandra_kt_pw}}\n"
        backup=no'
        
    # Edit server_encryption_options truststore
    - name: Replace server_encryption_options truststore
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="truststore:\sconf/\.truststore\n" 
        replace="truststore: {{cassandra_home}}/current_cassandra/conf/server-truststore.jks\n"
        backup=no'
        
    # Edit server_encryption_options truststore_password
    - name: Replace server_encryption_options truststore_password
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="truststore_password:\scassandra\n" 
        replace="truststore_password: {{cassandra_kt_pw}}\n"
        backup=no'
        
    # Remove commented trustore (for client-to-node)
    - name: Remove commented trustore (for client-to-node)
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="# truststore" 
        replace="truststore"
        backup=no'

    # Edit server_encryption_options protocol
    - name: Edit server_encryption_options protocol
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\sprotocol:\sTLS\n" 
        replace="protocol: TLS\n"
        backup=no'
        
    # Edit server_encryption_options algorithm
    - name: Edit server_encryption_options algorithm
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\salgorithm:\sSunX509\n" 
        replace="algorithm: SunX509\n"
        backup=no'

    # Edit server_encryption_options store_type
    - name: Edit server_encryption_options store_type
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\sstore_type:\sJKS\n" 
        replace="store_type: JKS\n"
        backup=no'

    # Edit server_encryption_options cipher_suites
    - name: Edit server_encryption_options cipher_suites
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\scipher_suites" 
        replace="cipher_suites"
        backup=no'
    
    # Edit server_encryption_options require_client_auth
    - name: Edit server_encryption_options require_client_auth
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\srequire_client_auth:\sfalse\n" 
        replace="require_client_auth: true\n"
        backup=no'

    # Edit server_encryption_options require_endpoint_verification
    - name: Edit server_encryption_options require_endpoint_verification
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="\#\srequire_endpoint_verification:\sfalse\n" 
        replace="require_endpoint_verification: false\n"
        backup=no'

    # Edit client_encryption_options enabled
    - name: client_encryption_options enabled
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra.yaml 
        regexp="client_encryption_options:\n\s\s\s\senabled:\sfalse\n" 
        replace="client_encryption_options:\n    enabled: true\n" 
        backup=no'
                        
    # Edit LOCAL_JMX
    - name: Change LOCAL_JMX
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra-env.sh 
        regexp="LOCAL_JMX=yes\n" 
        replace="LOCAL_JMX=no\n"
        backup=yes'
        
    # Edit jmxremote.password location
    - name: Replace jmxremote.password location
      replace: 
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra-env.sh 
        regexp="/etc/cassandra/jmxremote.password" 
        replace="{{ cassandra_home }}/current_cassandra/conf/jmxremote.password"
        backup=no'
        
    # Edit jmxremote.access line and location
    - name: Replace jmxremote.access line and location
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra-env.sh
        regexp="\#JVM_OPTS=\"\$JVM_OPTS -Dcom.sun.management.jmxremote.access.file=/etc/cassandra/jmxremote.access"
        replace="JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.access.file={{ cassandra_home }}/current_cassandra/conf/jmxremote.access"
        backup=no'

    # Create cassandra java tmpdir
    - name: Create cassandra java tmpdir
      file: 
        path: "{{ cassandra_home }}/current_cassandra/tmp"
        state: directory
        mode: 0755
             
    # Edit jmxremote.access line and location
    - name: Replace jmxremote.access line and location
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra-env.sh
        regexp="JVM_OPTS=\"\$JVM_OPTS \$JVM_EXTRA_OPTS"
        replace="JVM_OPTS=\"$JVM_OPTS -Djava.io.tmpdir={{ cassandra_home }}/current_cassandra/tmp"
        backup=no'               
              
    - name: Insert -Des.http.cname_in_publish_address=true
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/cassandra-env.sh"
        line: 'JVM_OPTS="$JVM_OPTS -Des.http.cname_in_publish_address=true"'
      when: cassandra_extra_opts == "-e" 
    
    - name: Insert extra opts at the end
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/cassandra-env.sh"
        line: 'JVM_OPTS="$JVM_OPTS $JVM_EXTRA_OPTS"'
            
    # Read-only jmxremote.password    
    - file: path={{ cassandra_home }}/current_cassandra/conf/jmxremote.password mode="400"

    # Edit cassandra-rackdc.properties
    - name: Replace dc
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra-rackdc.properties
        regexp="dc=[^\n]*\n"
        replace="dc={{ cassandra_dc }}\n"
        backup=yes'
        
    - name: Replace rack
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/cassandra-rackdc.properties
        regexp="rack=[^\n]*\n"
        replace="rack={{ cassandra_rack }}\n"
        backup=no'
      
    # Delete cassandra-topology.properties        
    - name: stat cassandra-topology.properties
      stat: path={{ cassandra_home }}/current_cassandra/conf/cassandra-topology.properties
      register: topology_stat

    - name: Rename cassandra-topology.properties
      command: mv {{ cassandra_home }}/current_cassandra/conf/cassandra-topology.properties {{ cassandra_home }}/current_cassandra/conf/cassandra-topology.properties.orig
      when: topology_stat.stat.exists
      
    # Edit elassandra.yml
    - name: Replace cluster_name
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml
        regexp="\#cluster.name:\s[^\n]*\n"
        replace="cluster.name: {{ cassandra_cluster_name }}\n"
        backup=yes'
      when: cassandra_extra_opts == "-e"
      
    - name: Replace node name
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml
        regexp="\#node.name:\s[^\n]*\n"
        replace="node.name: {{ inventory_hostname }}\n"
        backup=no'
      when: cassandra_extra_opts == "-e"
      
    - name: Replace node rack
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml
        regexp="\#node.attr.rack:\s[^\n]*\n"
        replace="node.attr.rack: {{ cassandra_rack }}\n"
        backup=no'
      when: cassandra_extra_opts == "-e"
      
    - name: Replace path data
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml
        regexp="\#path.data:\s[^\n]*\n"
        replace="path.data: {{ cassandra_data_dir }}\n"
        backup=no'
      when: cassandra_extra_opts == "-e"
      
    - name: Replace path logs
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml
        regexp="\#path.logs:\s[^\n]*\n"
        replace="path.logs: {{ cassandra_home }}/current_cassandra/logs\n"
        backup=no'
      when: cassandra_extra_opts == "-e"

    - name: Replace http port
      replace:
        'dest={{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml
        regexp="\#http.port:\s[^\n]*\n"
        replace="http.port: 9200\n"
        backup=no'
      when: cassandra_extra_opts == "-e"

    - name: Replace network host
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "network.host: 0.0.0.0"
      when: cassandra_extra_opts == "-e"
      
    - name: Insert bootstrap.system_call_filter
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "bootstrap.system_call_filter: false"
      when: cassandra_extra_opts == "-e"      

    - name: Replace http.publish_host
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "http.publish_host: {{inventory_hostname}}"
      when: cassandra_extra_opts == "-e"
            
    - name: Replace xpack.security.enabled
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.enabled: true"
      when: cassandra_extra_opts == "-e"
      
    - name: Replace xpack.security.http.ssl.enabled
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.http.ssl.enabled: false"
      when: cassandra_extra_opts == "-e"
      
    - name: Replace xpack.security.http.ssl.keystore.path
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.http.ssl.keystore.path: {{inventory_hostname}}.jks"
      when: cassandra_extra_opts == "-e"

    - name: Insert xpack.security.http.ssl.keystore.password
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.http.ssl.keystore.password: {{cassandra_kt_pw}}"
      when: cassandra_extra_opts == "-e"
      
    - name: Replace xpack.security.http.ssl.truststore.path
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.http.ssl.truststore.path: server-truststore.jks"
      when: cassandra_extra_opts == "-e"

    - name: Insert xpack.security.http.ssl.truststore.password
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.http.ssl.truststore.password: {{cassandra_kt_pw}}"
      when: cassandra_extra_opts == "-e"  
      
    - name: Insert xpack.security.http.ssl.truststore.password
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.http.ssl.client_authentication: required"
      when: cassandra_extra_opts == "-e"            
      
    - name: Insert xpack.security.transport.ssl.enabled
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.enabled: false"
      when: cassandra_extra_opts == "-e"

    - name: Replace xpack.security.transport.ssl.keystore.path
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.keystore.path: {{inventory_hostname}}.jks"
      when: cassandra_extra_opts == "-e"

    - name: Insert xpack.security.transport.ssl.keystore.password
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.keystore.password: {{cassandra_kt_pw}}"
      when: cassandra_extra_opts == "-e"
      
    - name: Replace xpack.security.transport.ssl.truststore.path
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.truststore.path: server-truststore.jks"
      when: cassandra_extra_opts == "-e"

    - name: Insert xpack.security.transport.ssl.truststore.password
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.truststore.password: {{cassandra_kt_pw}}"
      when: cassandra_extra_opts == "-e"  
      
    - name: Insert xpack.security.transport.ssl.truststore.password
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.client_authentication: required"
      when: cassandra_extra_opts == "-e" 
      
    - name: Insert xpack.security.transport.ssl.verification_mode
      lineinfile:
        path: "{{ cassandra_home }}/current_cassandra/conf/elasticsearch.yml"
        line: "xpack.security.transport.ssl.verification_mode: certificate"
      when: cassandra_extra_opts == "-e"       
      
    - name: Replace ES_HOME
      replace:
        'dest={{ cassandra_home }}/current_cassandra/bin/elasticsearch-env
        regexp="ES_HOME=[^\n]*dirname[^\n]*\n"
        replace="ES_HOME={{cassandra_home}}/current_cassandra\n"
        backup=yes'
      when: cassandra_extra_opts == "-e"
     
    # create elastic keystore
    - name: create elastic keystore
      shell: > 
        echo y | ./elasticsearch-keystore create 
      args: 
        executable: /bin/bash
        chdir: "{{ cassandra_home }}/current_cassandra/bin/"
      when: cassandra_extra_opts == "-e"
      
    # create elastic keystore password
    - name: create elastic keystore password
      shell: > 
        echo {{ cassandra_pw[env_domain] }} | ./elasticsearch-keystore add "bootstrap.password" 
      args: 
        executable: /bin/bash
        chdir: "{{ cassandra_home }}/current_cassandra/bin/"
      when: cassandra_extra_opts == "-e"      
      
    # Permissions for Splunk for installation
    - name: Permissions for Splunk for installation
      file: 
        path: "{{ cassandra_home }}/{{ cassandra_installation_type }}-{{ cassandra_version }}"
        mode: 0755
        
    # Permissions for Splunk for logs
    - name: Permissions for Splunk for logs
      file: 
        path: "{{ cassandra_home }}/{{ cassandra_installation_type }}-{{ cassandra_version }}/logs"
        state: directory
        mode: 0755
        
    # Remove tarball
    - name: Remove tarball
      file: 
        path: "{{ cassandra_home }}/{{ cassandra_installation_type }}.tar.gz"
        state: absent
      
    # ATTENTION for first time starting cluster
    # You need to pass the initial_token flag to the seeds, comment out allocate_tokens_for_keyspace and uncomment once started
    # In that case, you only start the seeds and create the main keyspace (used as allocate_tokens_for_keyspace argument)
    # $ python
    # >>> num_tokens = {{num_tokens}}
    # >>> num_racks = 3
    # >>> print "\n".join(['[Node {}] initial_token: {}'.format(r + 1, ','.join([str(((2**64 / (num_tokens * num_racks)) * (t * num_racks + r)) - 2**63) for t in range(num_tokens)])) for r in range(num_racks)])
